pipeline {
  agent any

  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }

  environment {
    // URL SonarQube local
    SONAR_URL      = "http://sonarqube:9000"
    // Nom complet de l'image Docker (DockerHub)
    DOCKER_IMAGE   = "efreistevers1/demo-java-app:${params.build_version}"
  }

  stages {
    stage('Checkout') {
      steps {
        // Cloner ton repo
        git branch: 'main', url: 'https://github.com/tydzzer/devops-demo-project.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          cd demo-java-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        // Utiliser le token stocké en credential
        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd demo-java-app
            mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          // Build de l'image
          def img = docker.build("${DOCKER_IMAGE}")
          // Push sécurisé via credential Jenkins
          docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
            img.push("${params.build_version}")
            img.push() // tag latest
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
          sh '''
            cd helm/app
            sed -i 's/tag: .*/tag: "${params.build_version}"/' values.yaml
            git config user.email "steve.nguyen@efrei.net"
            git config user.name "tydzzer"
            git add values.yaml
            git commit -m "Update deployment image to version ${params.build_version}"
            git push https://${GITHUB_TOKEN}@github.com/tydzzer/devops-demo-project.git HEAD:main
          '''
        }
      }
    }
  }

  post {
    success { echo "Pipeline #${env.BUILD_ID} terminé avec succès !" }
    failure { echo "Le pipeline a échoué. Vérifier les logs." }
  }
}
