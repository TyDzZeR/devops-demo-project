pipeline {
  agent any

  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }

  environment {
    // Adresse de SonarQube
    SONAR_URL         = "http://172.16.23.111:9000"
    // Tokens en clair (à sécuriser en production)
    SONAR_AUTH_TOKEN  = "squ_d6aa1994b289d7fdd96a6f63ca79a66eef515e21"
    GITHUB_TOKEN      = "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"
    // Image Docker à pousser
    DOCKER_IMAGE      = "efreistevers1/demo-java-app:${params.build_version}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/tydzzer/devops-demo-project.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          cd demo-java-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        sh '''
          cd demo-java-app
          mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}
        '''
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            cd demo-java-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
            // Login explicite
            sh "docker login -u efreistevers1 -p e%x8*Jygz6SK!$n"
            sh "docker push ${DOCKER_IMAGE}"
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        sh '''
          cd helm/app
          sed -i 's/tag: .*/tag: "${params.build_version}"/' values.yaml
          git config user.email "steve.nguyen@efrei.net"
          git config user.name "TyDzZeR"
          git add values.yaml
          git commit -m "Update deployment image to version ${params.build_version}"
          git push https://${GITHUB_TOKEN}@github.com/TyDzZeR/devops-demo-project.git HEAD:main
        '''
      }
    }
  }

  post {
    success {
      echo "Pipeline #${env.BUILD_ID} terminé avec succès!"
    }
    failure {
      echo "Le pipeline a échoué. Vérifier les logs."
    }
  }
}
